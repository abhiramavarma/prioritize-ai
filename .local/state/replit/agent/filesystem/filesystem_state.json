{"file_contents":{"app.py":{"content":"import os\nimport sqlite3\nfrom datetime import datetime\nfrom flask import Flask, render_template, request, redirect, url_for, flash, session, jsonify, make_response\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom flask_wtf.csrf import CSRFProtect\nimport json\nfrom google import genai\nfrom google.genai import types\nimport re\n\napp = Flask(__name__)\n\n# Security configuration\napp.secret_key = os.environ.get('SECRET_KEY', 'dev-secret-key-change-in-production')\ncsrf = CSRFProtect(app)\n\n# Enforce SECRET_KEY in production (when not in debug or testing mode)\nif not (app.debug or app.testing) and app.secret_key == 'dev-secret-key-change-in-production':\n    raise RuntimeError(\"SECRET_KEY environment variable must be set in production!\")\n\n# Valid values for validation\nVALID_STATUSES = {'pending', 'in-progress', 'resolved'}\nVALID_PRIORITIES = {'low', 'medium', 'high'}\n\n# Initialize database\ndef init_db():\n    conn = sqlite3.connect('database.db')\n    c = conn.cursor()\n    \n    # Users table\n    c.execute('''CREATE TABLE IF NOT EXISTS users (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        email TEXT UNIQUE NOT NULL,\n        password_hash TEXT NOT NULL,\n        role TEXT NOT NULL DEFAULT 'user'\n    )''')\n    \n    # Messages table\n    c.execute('''CREATE TABLE IF NOT EXISTS messages (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        user_id INTEGER NOT NULL,\n        content TEXT NOT NULL,\n        predicted_priority TEXT NOT NULL,\n        final_priority TEXT DEFAULT NULL,\n        status TEXT NOT NULL DEFAULT 'pending',\n        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (user_id) REFERENCES users (id)\n    )''')\n    \n    # Create default admin user\n    c.execute(\"SELECT id FROM users WHERE email = 'admin@example.com'\")\n    if not c.fetchone():\n        admin_hash = generate_password_hash('admin')\n        c.execute(\"INSERT INTO users (email, password_hash, role) VALUES (?, ?, ?)\",\n                 ('admin@example.com', admin_hash, 'admin'))\n    \n    conn.commit()\n    conn.close()\n\n# Load ML model\ndef load_model():\n    try:\n        # Try models directory first, then root directory\n        try:\n            return joblib.load('models/priority_model.pkl')\n        except FileNotFoundError:\n            return joblib.load('priority_model.pkl')\n    except Exception as e:\n        print(f\"Warning: Could not load ML model: {e}\")\n        return None\n\n# Text preprocessing\ndef preprocess_text(text):\n    text = text.lower()\n    text = re.sub(r'[^a-zA-Z\\s]', '', text)\n    text = re.sub(r'\\s+', ' ', text).strip()\n    return text\n\n# CSV sanitization to prevent formula injection\ndef sanitize_csv_field(field):\n    \"\"\"Sanitize CSV fields to prevent formula injection attacks\"\"\"\n    if field is None:\n        return ''\n    \n    field_str = str(field)\n    # Check if field starts with dangerous characters and prefix with single quote\n    if field_str and field_str[0] in ('=', '+', '-', '@'):\n        return \"'\" + field_str\n    return field_str\n\n# Convert SQLite timestamp to ISO format\ndef convert_to_iso_timestamp(sqlite_timestamp):\n    \"\"\"Convert SQLite timestamp to ISO format for better browser compatibility\"\"\"\n    if not sqlite_timestamp:\n        return None\n    \n    try:\n        # Parse SQLite timestamp format and convert to ISO\n        dt = datetime.fromisoformat(sqlite_timestamp.replace(' ', 'T'))\n        return dt.isoformat()\n    except (ValueError, AttributeError):\n        # Fallback to original if parsing fails\n        return sqlite_timestamp\n\n# Predict priority using ML model\ndef predict_priority(content):\n    model_data = load_model()\n    if not model_data:\n        return 'medium'  # Default priority\n    \n    model = model_data['model']\n    vectorizer = model_data['vectorizer']\n    \n    processed_text = preprocess_text(content)\n    text_vector = vectorizer.transform([processed_text])\n    priority = model.predict(text_vector)[0]\n    return priority\n\n# Database helper functions\ndef get_db_connection():\n    conn = sqlite3.connect('database.db')\n    conn.row_factory = sqlite3.Row\n    return conn\n\ndef get_user_by_email(email):\n    conn = get_db_connection()\n    user = conn.execute(\"SELECT * FROM users WHERE email = ?\", (email,)).fetchone()\n    conn.close()\n    return user\n\ndef get_user_by_id(user_id):\n    conn = get_db_connection()\n    user = conn.execute(\"SELECT * FROM users WHERE id = ?\", (user_id,)).fetchone()\n    conn.close()\n    return user\n\n# Authentication decorator\ndef login_required(f):\n    from functools import wraps\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if 'user_id' not in session:\n            return redirect(url_for('login'))\n        return f(*args, **kwargs)\n    return decorated_function\n\ndef admin_required(f):\n    from functools import wraps\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if 'user_id' not in session:\n            return redirect(url_for('login'))\n        user = get_user_by_id(session['user_id'])\n        if not user or user['role'] != 'admin':\n            flash('Access denied. Admin privileges required.', 'error')\n            return redirect(url_for('dashboard'))\n        return f(*args, **kwargs)\n    return decorated_function\n\n# Routes\n@app.route('/')\ndef index():\n    if 'user_id' in session:\n        return redirect(url_for('dashboard'))\n    return redirect(url_for('login'))\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    if request.method == 'POST':\n        email = request.form['email']\n        password = request.form['password']\n        \n        if get_user_by_email(email):\n            flash('Email already registered', 'error')\n            return render_template('register.html')\n        \n        password_hash = generate_password_hash(password)\n        conn = get_db_connection()\n        conn.execute(\"INSERT INTO users (email, password_hash) VALUES (?, ?)\",\n                    (email, password_hash))\n        conn.commit()\n        conn.close()\n        \n        flash('Registration successful! Please log in.', 'success')\n        return redirect(url_for('login'))\n    \n    return render_template('register.html')\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        email = request.form['email']\n        password = request.form['password']\n        \n        user = get_user_by_email(email)\n        if user and check_password_hash(user['password_hash'], password):\n            session['user_id'] = user['id']\n            session['user_email'] = user['email']\n            session['user_role'] = user['role']\n            flash('Login successful!', 'success')\n            return redirect(url_for('dashboard'))\n        else:\n            flash('Invalid email or password', 'error')\n    \n    return render_template('login.html')\n\n@app.route('/logout')\ndef logout():\n    session.clear()\n    flash('You have been logged out', 'info')\n    return redirect(url_for('login'))\n\n@app.route('/dashboard')\n@login_required\ndef dashboard():\n    if session.get('user_role') == 'admin':\n        return redirect(url_for('admin_dashboard'))\n    else:\n        return redirect(url_for('user_dashboard'))\n\n@app.route('/user/dashboard')\n@login_required\ndef user_dashboard():\n    conn = get_db_connection()\n    messages = conn.execute('''\n        SELECT * FROM messages \n        WHERE user_id = ? \n        ORDER BY timestamp DESC\n    ''', (session['user_id'],)).fetchall()\n    conn.close()\n    \n    return render_template('user_dashboard.html', messages=messages)\n\n@app.route('/user/submit', methods=['GET', 'POST'])\n@login_required\ndef submit_message():\n    if request.method == 'POST':\n        content = request.form['content']\n        predicted_priority = predict_priority(content)\n        \n        conn = get_db_connection()\n        conn.execute('''\n            INSERT INTO messages (user_id, content, predicted_priority)\n            VALUES (?, ?, ?)\n        ''', (session['user_id'], content, predicted_priority))\n        conn.commit()\n        conn.close()\n        \n        flash('Message submitted successfully!', 'success')\n        return redirect(url_for('user_dashboard'))\n    \n    return render_template('submit_message.html')\n\n@app.route('/admin/dashboard')\n@admin_required\ndef admin_dashboard():\n    conn = get_db_connection()\n    \n    # Priority order for sorting\n    priority_order = {'high': 3, 'medium': 2, 'low': 1}\n    \n    messages = conn.execute('''\n        SELECT m.*, u.email as user_email \n        FROM messages m\n        JOIN users u ON m.user_id = u.id\n        ORDER BY m.status ASC, m.timestamp DESC\n    ''').fetchall()\n    \n    # Sort by priority (use final_priority if set, otherwise predicted_priority)\n    def get_priority_value(msg):\n        priority = msg['final_priority'] or msg['predicted_priority']\n        return priority_order.get(priority, 2)\n    \n    messages = sorted(messages, key=get_priority_value, reverse=True)\n    conn.close()\n    \n    return render_template('admin_dashboard.html', messages=messages)\n\n@app.route('/api/admin/messages')\n@admin_required\ndef admin_messages_api():\n    \"\"\"API endpoint for dashboard auto-refresh\"\"\"\n    conn = get_db_connection()\n    \n    # Priority order for sorting\n    priority_order = {'high': 3, 'medium': 2, 'low': 1}\n    \n    messages = conn.execute('''\n        SELECT m.*, u.email as user_email \n        FROM messages m\n        JOIN users u ON m.user_id = u.id\n        ORDER BY m.status ASC, m.timestamp DESC\n    ''').fetchall()\n    \n    # Convert to list of dicts and sort by priority\n    messages_list = []\n    for msg in messages:\n        msg_dict = dict(msg)\n        priority = msg_dict['final_priority'] or msg_dict['predicted_priority']\n        msg_dict['effective_priority'] = priority\n        msg_dict['priority_order'] = priority_order.get(priority, 2)\n        # Convert timestamp to ISO format for better browser compatibility\n        msg_dict['timestamp'] = convert_to_iso_timestamp(msg_dict['timestamp'])\n        messages_list.append(msg_dict)\n    \n    messages_list = sorted(messages_list, key=lambda x: x['priority_order'], reverse=True)\n    conn.close()\n    \n    return jsonify({'messages': messages_list})\n\n@app.route('/admin/export/csv')\n@admin_required\ndef export_messages_csv():\n    \"\"\"Export all messages as CSV\"\"\"\n    import csv\n    from io import StringIO\n    \n    conn = get_db_connection()\n    messages = conn.execute('''\n        SELECT m.*, u.email as user_email \n        FROM messages m\n        JOIN users u ON m.user_id = u.id\n        ORDER BY m.timestamp DESC\n    ''').fetchall()\n    conn.close()\n    \n    # Create CSV content\n    output = StringIO()\n    writer = csv.writer(output)\n    \n    # Write headers\n    writer.writerow(['ID', 'User Email', 'Content', 'AI Priority', 'Final Priority', 'Status', 'Timestamp'])\n    \n    # Write data with formula injection protection\n    for msg in messages:\n        writer.writerow([\n            sanitize_csv_field(msg['id']),\n            sanitize_csv_field(msg['user_email']),\n            sanitize_csv_field(msg['content']),\n            sanitize_csv_field(msg['predicted_priority']),\n            sanitize_csv_field(msg['final_priority'] or ''),\n            sanitize_csv_field(msg['status']),\n            sanitize_csv_field(msg['timestamp'])\n        ])\n    \n    output.seek(0)\n    \n    # Create response with CSV content\n    response = make_response(output.getvalue())\n    response.headers['Content-Type'] = 'text/csv'\n    response.headers['Content-Disposition'] = f'attachment; filename=messages_export_{datetime.now().strftime(\"%Y%m%d_%H%M%S\")}.csv'\n    \n    return response\n\n@app.route('/admin/update_message/<int:message_id>', methods=['POST'])\n@admin_required\ndef update_message(message_id):\n    status = request.form.get('status')\n    priority = request.form.get('priority')\n    \n    # Validate inputs\n    if status and status not in VALID_STATUSES:\n        flash('Invalid status value', 'error')\n        return redirect(url_for('admin_dashboard'))\n    \n    if priority and priority not in VALID_PRIORITIES:\n        flash('Invalid priority value', 'error')\n        return redirect(url_for('admin_dashboard'))\n    \n    conn = get_db_connection()\n    \n    updates = []\n    params = []\n    \n    if status:\n        updates.append(\"status = ?\")\n        params.append(status)\n    \n    if priority:\n        updates.append(\"final_priority = ?\")\n        params.append(priority)\n    \n    if updates:\n        params.append(message_id)\n        query = f\"UPDATE messages SET {', '.join(updates)} WHERE id = ?\"\n        conn.execute(query, params)\n        conn.commit()\n    \n    conn.close()\n    \n    flash('Message updated successfully!', 'success')\n    return redirect(url_for('admin_dashboard'))\n\nif __name__ == '__main__':\n    init_db()\n    # Use debug=False for production safety\n    debug_mode = os.environ.get('FLASK_DEBUG', 'False').lower() == 'true'\n    app.run(host='0.0.0.0', port=5000, debug=debug_mode)","size_bytes":12906},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"flask-wtf>=1.2.2\",\n    \"flask>=3.1.2\",\n    \"joblib>=1.5.2\",\n    \"pandas>=2.3.2\",\n    \"scikit-learn>=1.7.2\",\n    \"werkzeug>=3.1.3\",\n    \"google-genai>=1.35.0\",\n]\n","size_bytes":308},"replit.md":{"content":"# PrioritizeAI - ML-Based Task Management System\n\n## Overview\n\nPrioritizeAI is an intelligent task management system that uses machine learning to automatically prioritize messages and requests. The system is designed for educational institutions where teachers and managers receive multiple problem reports and need efficient prioritization to handle urgent issues first. The application uses natural language processing to analyze message content and predict priority levels (high, medium, low), replacing inefficient FIFO processing with intelligent ML-based prioritization.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Web Framework & Backend\n- **Flask-based web application** with session-based authentication\n- **Role-based access control** with two user types: regular users (submit messages) and admins (manage and prioritize messages)\n- **SQLite database** for data persistence, chosen for simplicity and Replit compatibility\n- **Werkzeug security** for password hashing and user authentication\n\n### Machine Learning Pipeline\n- **Scikit-learn** for ML model training and inference\n- **TF-IDF vectorization** for text feature extraction from message content\n- **Logistic regression** classifier for priority prediction (high/medium/low)\n- **Model persistence** using joblib for saving/loading trained models\n- **Text preprocessing** with regex-based cleaning and normalization\n\n### Database Schema\n- **Users table**: Stores user credentials and roles (id, email, password_hash, role)\n- **Messages table**: Stores messages with ML predictions and admin overrides (id, user_id, content, predicted_priority, final_priority, status, timestamp)\n- **Foreign key relationships** linking messages to users\n\n### Frontend Architecture\n- **Bootstrap 5** for responsive UI design\n- **Font Awesome** icons for visual enhancement\n- **Jinja2 templating** with template inheritance for consistent layout\n- **Color-coded priority system** with visual indicators for different priority levels\n- **Status tracking** with visual badges for message states (pending, in-progress, resolved)\n\n### Authentication & Authorization\n- **Session-based authentication** using Flask sessions\n- **Environment variable configuration** for admin account creation\n- **Password validation** with minimum length requirements\n- **Role-based route protection** ensuring proper access control\n\n### Data Flow Architecture\n1. **Message submission**: Users submit messages through web forms\n2. **ML processing**: System applies trained model to predict priority\n3. **Data persistence**: Messages stored with predicted priorities\n4. **Admin workflow**: Admins view prioritized messages and can override priorities\n5. **Status updates**: Admins update message status through workflow states\n6. **User tracking**: Users can view their messages and status updates\n\n### Training Data & Model\n- **Sample dataset creation** with realistic educational institution scenarios\n- **Balanced training data** across priority levels with domain-specific examples\n- **Text preprocessing pipeline** for consistent feature extraction\n- **Model evaluation** using classification reports for performance monitoring\n\n## External Dependencies\n\n### Core Frameworks\n- **Flask**: Web application framework for routing and request handling\n- **SQLite3**: Embedded database for data storage (built into Python)\n- **Werkzeug**: Security utilities for password hashing\n\n### Machine Learning Stack\n- **scikit-learn**: ML library for training and inference\n- **pandas**: Data manipulation for training data handling\n- **joblib**: Model serialization and persistence\n\n### Frontend Libraries\n- **Bootstrap 5**: CSS framework for responsive design (CDN)\n- **Font Awesome 6**: Icon library for UI enhancement (CDN)\n\n### Python Standard Library\n- **os**: Environment variable access and system operations\n- **datetime**: Timestamp handling for message tracking\n- **re**: Regular expressions for text preprocessing\n\n### Environment Configuration\n- **SECRET_KEY**: Flask session security (environment variable)\n- **ADMIN_EMAIL/ADMIN_PASSWORD**: Default admin account creation (environment variables)","size_bytes":4189},"models/train_model.py":{"content":"import pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nimport joblib\nimport re\n\ndef preprocess_text(text):\n    \"\"\"Clean and preprocess text data\"\"\"\n    text = text.lower()\n    text = re.sub(r'[^a-zA-Z\\s]', '', text)\n    text = re.sub(r'\\s+', ' ', text).strip()\n    return text\n\ndef create_sample_data():\n    \"\"\"Create sample training data for message prioritization\"\"\"\n    sample_messages = [\n        # High priority messages\n        (\"Server down completely, students cannot access online exam\", \"high\"),\n        (\"Critical security breach detected in student database\", \"high\"),\n        (\"Fire alarm system malfunctioning in dormitory\", \"high\"),\n        (\"Payment system crashed, cannot process tuition payments\", \"high\"),\n        (\"Network outage affecting entire campus\", \"high\"),\n        (\"Emergency evacuation needed in building A\", \"high\"),\n        (\"Database corruption, losing student records\", \"high\"),\n        (\"Website compromised, personal data at risk\", \"high\"),\n        (\"Heating system failed in winter dormitory\", \"high\"),\n        (\"Critical assignment system down before deadline\", \"high\"),\n        \n        # Medium priority messages\n        (\"Printer in library not working properly\", \"medium\"),\n        (\"WiFi connection slow in computer lab\", \"medium\"),\n        (\"Projector bulb needs replacement in classroom 205\", \"medium\"),\n        (\"Student portal login issues reported by few users\", \"medium\"),\n        (\"Cafeteria POS system occasionally freezing\", \"medium\"),\n        (\"Air conditioning unit making noise in office\", \"medium\"),\n        (\"Some students having trouble with course registration\", \"medium\"),\n        (\"Email notifications arriving with delay\", \"medium\"),\n        (\"Library computer runs slowly\", \"medium\"),\n        (\"Parking gate sensor needs calibration\", \"medium\"),\n        (\"Classroom whiteboard marker dried out\", \"medium\"),\n        (\"Online gradebook shows incorrect formatting\", \"medium\"),\n        \n        # Low priority messages\n        (\"Request for new software installation on personal laptop\", \"low\"),\n        (\"Question about how to change password\", \"low\"),\n        (\"Suggestion to improve cafeteria menu\", \"low\"),\n        (\"Request for additional parking spaces\", \"low\"),\n        (\"Inquiry about campus tour schedule\", \"low\"),\n        (\"Feedback about website design preferences\", \"low\"),\n        (\"Request for more comfortable chairs in library\", \"low\"),\n        (\"Question about IT support hours\", \"low\"),\n        (\"Suggestion for new recreational activities\", \"low\"),\n        (\"Request for additional power outlets in study areas\", \"low\"),\n        (\"Inquiry about software training sessions\", \"low\"),\n        (\"General feedback about campus facilities\", \"low\"),\n        (\"Request for updated campus map\", \"low\"),\n        (\"Question about printer paper refill process\", \"low\"),\n        (\"Suggestion for extended library hours\", \"low\")\n    ]\n    \n    # Convert to DataFrame with explicit column specification\n    df = pd.DataFrame(sample_messages)\n    df.columns = ['message', 'priority']\n    return df\n\ndef train_model():\n    \"\"\"Train the priority prediction model\"\"\"\n    print(\"Creating sample training data...\")\n    df = create_sample_data()\n    \n    print(f\"Training data shape: {df.shape}\")\n    print(f\"Priority distribution:\\n{df['priority'].value_counts()}\")\n    \n    # Preprocess text data\n    print(\"Preprocessing text data...\")\n    df['processed_message'] = df['message'].apply(preprocess_text)\n    \n    # Split data\n    X_train, X_test, y_train, y_test = train_test_split(\n        df['processed_message'], df['priority'], \n        test_size=0.2, random_state=42, stratify=df['priority']\n    )\n    \n    # Create TF-IDF vectorizer\n    print(\"Creating TF-IDF vectors...\")\n    vectorizer = TfidfVectorizer(\n        max_features=1000,\n        stop_words='english',\n        ngram_range=(1, 2)\n    )\n    \n    X_train_vec = vectorizer.fit_transform(X_train)\n    X_test_vec = vectorizer.transform(X_test)\n    \n    # Train model\n    print(\"Training Logistic Regression model...\")\n    model = LogisticRegression(random_state=42, class_weight='balanced')\n    model.fit(X_train_vec, y_train)\n    \n    # Evaluate model\n    y_pred = model.predict(X_test_vec)\n    print(\"\\nModel Performance:\")\n    print(classification_report(y_test, y_pred))\n    \n    # Save model and vectorizer\n    print(\"Saving model...\")\n    model_data = {\n        'model': model,\n        'vectorizer': vectorizer\n    }\n    \n    joblib.dump(model_data, 'priority_model.pkl')\n    print(\"Model saved as priority_model.pkl\")\n    \n    # Test with sample predictions\n    print(\"\\nSample predictions:\")\n    test_messages = [\n        \"Server is completely down and students cannot login\",\n        \"Printer in room 101 is out of paper\",\n        \"Suggestion for better food in cafeteria\"\n    ]\n    \n    for msg in test_messages:\n        processed = preprocess_text(msg)\n        prediction = model.predict(vectorizer.transform([processed]))[0]\n        print(f\"Message: '{msg}' -> Priority: {prediction}\")\n\nif __name__ == \"__main__\":\n    train_model()","size_bytes":5243}},"version":1}